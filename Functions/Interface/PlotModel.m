function [OsteoArticularModel,Markers,EnableModel] = PlotModel(ModelParameters,ax,seg_anim,muscles_anim,mod_marker_anim,exp_marker_anim,external_forces_anim,external_forces_pred,Anim)
% Plotting model for graphic interface
% 
%   INPUT
%   - ModelParameters: parameters of the musculoskeletal model,
%   automatically generated by the graphic interface 'GenerateParameters' 
%   - ax: name of axis to plot
%   - seg_anim: representation of the osteo-articular model (0 or 1)
%   - muscles_anim: representation of the muscles (0 or 1)
%   - mod_marker_anim: representation of the model markers (0 or 1)
%   - exp_marker_anim: representation of the experimental markers (0 or 1)
%   - external_forces_anim: representation of the experimental external
%   forces (0 or 1)
%   - external_forces_pred: representation of the predicted external forces
%   (0 or 1)
%   - Anim: parameters of the animation
%   OUTPUT
%   - OsteoArticularModel: osteo-articular model (see the Documentation for
%   the structure) 
%   - Markers: set of markers (see the Documentation for the structure) 
%   - EnableModel: for each body part, this variable evaluates the
%   possibility to add the associated model (used for the graphic
%   interface 'GenerateParameters').
%________________________________________________________
%
% Licence
% Toolbox distributed under 3-Clause BSD License
%________________________________________________________
%
% Authors : Antoine Muller, Charles Pontonnier, Pierre Puchaud and
% Georges Dumont
%________________________________________________________

%% Lines width
size_bones = 4;
size_muscles = 1;
size_markers = 20; 
if isfield(Anim,'CoefLineWidth')
    size_bones = size_bones*Anim.CoefLineWidth;
    size_muscles = size_muscles*Anim.CoefLineWidth;
    if size_muscles < 0.5
        size_muscles = 0.5;
    end
    size_markers = size_markers*Anim.CoefLineWidth;
end

%% Loading or generation of the model
if Anim.ModelChoice % only a view to generate the model
    [OsteoArticularModel, Markers, Muscles, EnableModel] = ModelGeneration(ModelParameters);
    [Markers]=VerifMarkersOnModel(OsteoArticularModel,Markers);
else
    load('BiomechanicalModel.mat'); %#ok<LOAD>
    OsteoArticularModel = BiomechanicalModel.OsteoArticularModel;
    Markers = BiomechanicalModel.Markers;
    Muscles = BiomechanicalModel.Muscles;
end

%% Position and orientation of the pelvis
[OsteoArticularModel] = anat_position_solid_repere(OsteoArticularModel,find(~[OsteoArticularModel.mother]));
if Anim.ModelChoice % only a view to generate the model
    RPelvis = Rodrigues([0 1 0],-110*pi/180);
else
    RPelvis = eye(3);
end
if isfield(Anim,'q')
    q = Anim.q;
else
    q = zeros(numel(OsteoArticularModel),1);
end

%% Forward kinematics
[Human_model_bis,Muscles_bis, Markers_set_bis]=ForwardKinematicsAnimation_Interf(OsteoArticularModel,Markers,Muscles,q,find(~[OsteoArticularModel.mother]),muscles_anim,mod_marker_anim,RPelvis);

%% Segments visualization
if seg_anim
    for j=find([Human_model_bis.Visual])
        pts=Human_model_bis(j).pos_pts_anim;
        for np=1:size(pts,2)
            for npb=np:size(pts,2)
                plot3(ax,pts(1,[np npb]),pts(2,[np npb]),pts(3,[np npb]),'Color',0.4*[1 1 1],'LineWidth',size_bones);
            end
        end
    end
end

%% Muscles visualization
if muscles_anim
    % color (according to the activation)
    if Anim.ModelChoice % constant color
        color_mus = ones(numel(Muscles_bis),1)*[1 0 0];
    else
        color0 = [0.9 0.9 0.9];
        color1 = [1 0 0];
        color_mus = color0 + Anim.A*(color1 - color0);
    end
    for mu = 1:numel(Muscles_bis)
        if Muscles_bis(mu).exist
            for nb_pts = 1:(size(Muscles_bis(mu).pos_pts,2)-1)
                plot3(ax,Muscles_bis(mu).pos_pts(1,[nb_pts nb_pts+1]),Muscles_bis(mu).pos_pts(2,[nb_pts nb_pts+1]),Muscles_bis(mu).pos_pts(3,[nb_pts nb_pts+1]),'Color',color_mus(mu,:),'LineWidth',size_muscles);
            end
        end
    end
end

%% Model markers visualization
if mod_marker_anim
    for marker = 1:numel(Markers_set_bis)
        if Markers_set_bis(marker).exist
            scatter3(ax,Markers_set_bis(marker).pos_anim(1,:),Markers_set_bis(marker).pos_anim(2,:),Markers_set_bis(marker).pos_anim(3,:),size_markers,'filled','MarkerFaceColor',[255 102 0]/255)
        end
    end
end

%% Experimental markers visualization
if exp_marker_anim
    for marker = 1:numel(Anim.real_markers)
        scatter3(ax,Anim.real_markers(marker).position_f(1),Anim.real_markers(marker).position_f(2),Anim.real_markers(marker).position_f(3),20,'filled','MarkerFaceColor',[0 153 255]/255)
    end
end

%% External forces
if external_forces_anim
	coef_f_visual=(ModelParameters.Mass*9.81);
    color_vect = [53 210 55]/255;
    for nb_f=1:size(Anim.external_forces,2)
        plot3(ax,[Anim.external_forces(1,nb_f), Anim.external_forces(1,nb_f) + Anim.external_forces(4,nb_f)/coef_f_visual],...
            [Anim.external_forces(2,nb_f), Anim.external_forces(2,nb_f) + Anim.external_forces(5,nb_f)/coef_f_visual],...
            [Anim.external_forces(3,nb_f), Anim.external_forces(3,nb_f) + Anim.external_forces(6,nb_f)/coef_f_visual],...
            'color', color_vect, 'LineWidth', 2);
    end
end

%% Predicted external forces
if external_forces_pred
	coef_f_visual=(ModelParameters.Mass*9.81);
    color_vect = 1-([53 210 55]/255);
    for nb_f=1:size(Anim.external_forces_pred,2)
        plot3(ax,[Anim.external_forces_pred(1,nb_f), Anim.external_forces_pred(1,nb_f) + Anim.external_forces_pred(4,nb_f)/coef_f_visual],...
            [Anim.external_forces_pred(2,nb_f), Anim.external_forces_pred(2,nb_f) + Anim.external_forces_pred(5,nb_f)/coef_f_visual],...
            [Anim.external_forces_pred(3,nb_f), Anim.external_forces_pred(3,nb_f) + Anim.external_forces_pred(6,nb_f)/coef_f_visual],...
            'color', color_vect, 'LineWidth', 2);
    end
end

end
