function [MuscleForcesComputationResults] = ForcesComputationOptiNum(filename, BiomechanicalModel, AnalysisParameters)
% Computation of the muscle forces estimation step by using an optimization method
%
%	Based on :
%	- Crowninshield, R. D., 1978.
%	Use of optimization techniques to predict muscle forces. Journal of Biomechanical Engineering, 100(2), 88-92.
%
%   INPUT
%   - filename: name of the file to process (character string)
%   - BiomechanicalModel: musculoskeletal model
%   - AnalysisParameters: parameters of the musculoskeletal analysis,
%   automatically generated by the graphic interface 'Analysis'
%   OUTPUT
%   - MuscleForcesComputationResults: results of the muscle forces
%   estimation step (see the Documentation for the structure)
%________________________________________________________
%
% Licence
% Toolbox distributed under GPL 3.0 Licence
%________________________________________________________
%
% Authors : Antoine Muller, Charles Pontonnier, Pierre Puchaud and
% Georges Dumont
%________________________________________________________
disp(['Forces Computation (' filename ') ...'])

%% Loading variables

Muscles = BiomechanicalModel.Muscles;
load([filename '/InverseKinematicsResults']) %#ok<LOAD>
load([filename '/InverseDynamicsResults']) %#ok<LOAD>



q=InverseKinematicsResults.JointCoordinates;
torques =InverseDynamicsResults.JointTorques;


Nb_q=size(q,1);
Nb_frames=size(torques,2);

%existing muscles
idm = logical([Muscles.exist]);
Nb_muscles=numel(Muscles(idm));

%% computation of muscle moment arms from joint posture
L0=zeros(Nb_muscles,1);
Ls=zeros(Nb_muscles,1);
for i=1:Nb_muscles
    L0(i) = BiomechanicalModel.Muscles(i).l0;
    Ls(i) = BiomechanicalModel.Muscles(i).ls;
end
Lmt=zeros(Nb_muscles,Nb_frames);
R=zeros(Nb_q,Nb_muscles,Nb_frames);
for i=1:Nb_frames % for each frames
    Lmt(idm,i)   =   MuscleLengthComputationNum(BiomechanicalModel,q(:,i)); %dependant of every q (q_complete)
    R(:,:,i)    =   MomentArmsComputationNum(BiomechanicalModel,q(:,i),0.0001); %depend on reduced set of q (q_red)
end

Lm = Lmt./(Ls./L0+1);
% Muscle length ratio to optimal length
Lm_norm = Lm./L0;

[idxj,~]=find(sum(R(:,:,1),2)~=0);

%% Computation of muscle forces (optimization)
% Optimisation parameters
F0 = 0.5*ones(Nb_muscles,1);
Fmin = zeros(Nb_muscles,1);
Amin = zeros(Nb_muscles,1);
A0  = 0.5*ones(Nb_muscles,1);
% Fmax
Fmax = [Muscles(idm).f0]';
Amax = ones(Nb_muscles,1);
Fopt = zeros(Nb_muscles,Nb_frames);
Aopt = zeros(size(Fopt));
% Muscle Forces Matrices computation
[Fl,Fp]=AnalysisParameters.Muscles.MuscleModel(Lm,Fmax);

options1 = optimoptions(@fmincon,'Algorithm','sqp','Display','final','GradObj','off','GradConstr','off','TolFun',1e-6,'MaxIterations',100000,'MaxFunEvals',100000);
options2 = optimoptions(@fmincon,'Algorithm','sqp','Display','final','GradObj','off','GradConstr','off','TolFun',1e-6,'MaxIterations',1000,'MaxFunEvals',2000000);
%options = optimoptions(@fmincon,'Algorithm','sqp','Display','off','GradObj','off','GradConstr','off','TolFun',1e-9,'MaxFunEvals',20000);
% options = optimoptions(@fmincon,'Algorithm','sqp','Display','off','GradObj','off','GradConstr','off','TolFun',1e-9,'MaxFunEvals',100000,'TolX',1e-9,'StepTolerance',1e-15,'FunctionTolerance',1e-10,'MaxIterations',5000);

h = waitbar(0,['Forces Computation (' filename ')']);

if isfield(BiomechanicalModel.OsteoArticularModel,'ClosedLoop') && ~isempty([BiomechanicalModel.OsteoArticularModel.ClosedLoop])    
    % TO BE CHANGED AFTER CALIBRATION
    k=ones(size(q,1),1);
    
    
    [solid_path1,solid_path2,num_solid,num_markers]=Data_ClosedLoop(BiomechanicalModel.OsteoArticularModel);
    
    
    dependancies=KinematicDependancy(BiomechanicalModel.OsteoArticularModel);
    KT=ConstraintsJacobian(BiomechanicalModel,q(:,1),solid_path1,solid_path2,num_solid,num_markers,k,0.0001,dependancies)';
    
    [idKT,~]=find(sum(KT(:,:,1),2)~=0);
    
    idq=intersect(idKT,idxj);

    
    F0=[F0 ; zeros(size(KT,2),1)];
%     Fopt=[Fopt; zeros(size(KT,2),Nb_frames)];
    Aopt=[Aopt; zeros(size(KT,2),Nb_frames)];
    Fmin =[Fmin ;-inf*ones(size(KT,2),1)];
    Amin =[Amin ;-inf*ones(size(KT,2),1)];
    Fmax =[Fmax ;inf*ones(size(KT,2),1)];
    Amax =[Amax ;inf*ones(size(KT,2),1)];
    Aeq = [R(idq,:,i) KT(idq,:)];
    % Joint Torques
    beq=torques(idq,i);
    [Aopt(:,1)] = AnalysisParameters.Muscles.Costfunction(A0, Aeq, beq, Amin, Amax, options1, AnalysisParameters.Muscles.CostfunctionOptions, Fmax);
    A0=Aopt(:,1);
    for i=2:Nb_frames % for each frames
        KT=ConstraintsJacobian(BiomechanicalModel,q(:,i),solid_path1,solid_path2,num_solid,num_markers,k,0.0001,dependancies)';
        
        Aeq = [R(idq,:,i) KT(idq,:)];
        % Joint Torques
        beq=torques(idq,i);
        % Optimization
        [Aopt(:,i)] = AnalysisParameters.Muscles.Costfunction(A0, Aeq, beq, Amin, Amax, options2, AnalysisParameters.Muscles.CostfunctionOptions, Fmax);
        
        % Muscular activity
%         Aopt(:,i) = Fopt(1:Nb_muscles,i)./Fmax(1:Nb_muscles);
%         F0=Fopt(:,i);
        A0=Aopt(:,i);
        waitbar(i/Nb_frames)
    end
    
    Fopt = Fmax.*Aopt;
    MuscleForcesComputationResults.MuscleActivations(idm,:) = Aopt;
    MuscleForcesComputationResults.MuscleForces(idm,:) = Fopt(1:Nb_muscles,:);
    MuscleForcesComputationResults.MuscleLengths= Lmt;
    MuscleForcesComputationResults.MuscleLeverArm = R;
    
else
    % Moment arms 
    Aeq=R(idxj,:,1).*(Fl(:,1))';
    % Joint Torques
    beq=torques(idxj,1) - R(idxj,:,1)*Fp(:,1); % C
    [Aopt(:,1)] = AnalysisParameters.Muscles.Costfunction(A0, Aeq, beq, Amin, Amax, options1, AnalysisParameters.Muscles.CostfunctionOptions, Fmax);
%     F0=Fopt(:,1);
    A0=Aopt(:,1);
    Fopt(:,1) = Fl(:,1).*Aopt(:,1)+Fp(:,1);
    
    for i=1:Nb_frames % for each frames
        % Moment arms
        Aeq=R(idxj,:,i).*(Fl(:,i))';
        % Joint Torques
        beq=torques(idxj,i) - R(idxj,:,i)*Fp(:,i); % C
        % Optimization
        [Aopt(:,i)] = AnalysisParameters.Muscles.Costfunction(A0, Aeq, beq, Amin, Amax, options2, AnalysisParameters.Muscles.CostfunctionOptions, Fmax);        
        % Muscular activity
%         Aopt(:,i) = Fopt(:,i)./Fmax;
%         F0=Fopt(:,i);
        A0=Aopt(:,i);
        waitbar(i/Nb_frames)
        Fopt(:,i) = Fl(:,i).*Aopt(:,i)+Fp(:,i);
    end
    
    MuscleForcesComputationResults.MuscleActivations(idm,:) = Aopt;
    MuscleForcesComputationResults.MuscleForces(idm,:) = Fopt;
    MuscleForcesComputationResults.MuscleLengths= Lmt;
    MuscleForcesComputationResults.MuscleLeverArm = R;
    
end

close(h)

disp(['... Forces Computation (' filename ') done'])


end