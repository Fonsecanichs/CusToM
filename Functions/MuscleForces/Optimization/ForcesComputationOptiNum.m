function [MuscleForcesComputationResults] = ForcesComputationOptiNum(filename, BiomechanicalModel, AnalysisParameters)
% Computation of the muscle forces estimation step by using an optimization method
%
%	Based on :
%	- Crowninshield, R. D., 1978.
%	Use of optimization techniques to predict muscle forces. Journal of Biomechanical Engineering, 100(2), 88-92.
%
%   INPUT
%   - filename: name of the file to process (character string)
%   - BiomechanicalModel: musculoskeletal model
%   - AnalysisParameters: parameters of the musculoskeletal analysis,
%   automatically generated by the graphic interface 'Analysis'
%   OUTPUT
%   - MuscleForcesComputationResults: results of the muscle forces
%   estimation step (see the Documentation for the structure)
%________________________________________________________
%
% Licence
% Toolbox distributed under GPL 3.0 Licence
%________________________________________________________
%
% Authors : Antoine Muller, Charles Pontonnier, Pierre Puchaud and
% Georges Dumont
%________________________________________________________
disp(['Forces Computation (' filename ') ...'])

%% Loading variables

Muscles = BiomechanicalModel.Muscles;
load([filename '/InverseKinematicsResults']) %#ok<LOAD>
load([filename '/InverseDynamicsResults']) %#ok<LOAD>

if isfield(BiomechanicalModel,'Generalized_Coordinates')
    q_map_unsix = BiomechanicalModel.Generalized_Coordinates.q_map_unsix;
    Q=[InverseKinematicsResults.FreeJointCoordinates(end,:);...
        InverseKinematicsResults.JointCoordinates(2:end,:);
        InverseKinematicsResults.JointCoordinates(1,:);
        InverseKinematicsResults.FreeJointCoordinates(1:end-1,:)];
    q = q_map_unsix'*Q;
    
    torques = q_map_unsix'*[InverseDynamicsResults.DynamicResiduals.t6dof(end,:);...
        InverseDynamicsResults.JointTorques(2:end,:);
        InverseDynamicsResults.JointTorques(1,:);
        InverseDynamicsResults.DynamicResiduals.f6dof;
        InverseDynamicsResults.DynamicResiduals.t6dof(1:end-1,:)];
else
    q=InverseKinematicsResults.JointCoordinates;
    torques=InverseDynamicsResults.JointTorques;
end

Nb_q=size(q,1);
Nb_frames=size(torques,2);

%existing muscles
idm = logical([Muscles.exist]);
Nb_muscles=numel(Muscles(idm));

%% computation of muscle moment arms from joint posture
Lm=zeros(Nb_muscles,Nb_frames);
R=zeros(Nb_q,Nb_muscles,Nb_frames);
for i=1:Nb_frames % for each frames
    Lm(idm,i)   =   MuscleLengthComputationNum(BiomechanicalModel,Q(:,i)); %dependant of every q (q_complete)
    R(:,:,i)    =   MomentArmsComputationNum(BiomechanicalModel,Q(:,i),0.0001); %depend on reduced set of q (q_red)
end

[idxj,~]=find(sum(R(:,:,1),2)~=0);

%% Computation of muscle forces (optimization)
% Optimisation parameters
F0 = zeros(Nb_muscles,1);
Fmin = zeros(Nb_muscles,1);
% Fmax
Fmax = [Muscles(idm).f0]';
Fopt = zeros(Nb_muscles,Nb_frames);
Aopt = zeros(size(Fopt));

options = optimoptions(@fmincon,'Algorithm','sqp','Display','off','GradObj','off','GradConstr','off','TolFun',1e-6);
% options = optimoptions(@fmincon,'Algorithm','sqp','Display','off','GradObj','off','GradConstr','off','TolFun',1e-9,'MaxFunEvals',20000);
% options = optimoptions(@fmincon,'Algorithm','sqp','Display','off','GradObj','off','GradConstr','off','TolFun',1e-9,'MaxFunEvals',100000,'TolX',1e-9,'StepTolerance',1e-15,'FunctionTolerance',1e-10,'MaxIterations',5000);

h = waitbar(0,['Forces Computation (' filename ')']);

for i=1:Nb_frames % for each frames
    % Moment arms
    Aeq=R(idxj,:,i);
    % Joint Torques
    beq=torques(idxj,i); % C
    % Optimization
    Fopt(:,i) = AnalysisParameters.Muscles.Costfunction(F0, Aeq, beq, Fmin, Fmax, options, AnalysisParameters.Muscles.CostfunctionOptions, Fmax);
    % Muscular activity
    Aopt(:,i) = Fopt(:,i)./Fmax;
    F0=Fopt(:,i);
    waitbar(i/Nb_frames)
end
close(h)

MuscleForcesComputationResults.MuscleActivations(idm,:) = Aopt;
MuscleForcesComputationResults.MuscleForces(idm,:) = Fopt;
MuscleForcesComputationResults.MuscleLengths= Lm;
MuscleForcesComputationResults.MuscleLeverArm = R;

disp(['... Forces Computation (' filename ') done'])


end