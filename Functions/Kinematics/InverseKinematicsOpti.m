function [ExperimentalData, InverseKinematicResults] = InverseKinematicsOpti(filename,AnalysisParameters,BiomechanicalModel)
% Computation of the inverse kinematics step thanks to a sqp optimization method
%   
%   INPUT
%   - filename: name of the file to process (character string)
%   - AnalysisParameters: parameters of the musculoskeletal analysis,
%   automatically generated by the graphic interface 'Analysis' 
%   - BiomechanicalModel: musculoskeletal model
%   OUTPUT
%   - ExperimentalData: motion capture data(see the Documentation for the structure)
%   - InverseKinematicResults: results of the inverse kinematics step (see
%   the Documentation for the structure) 
%________________________________________________________
%
% Licence
% Toolbox distributed under 3-Clause BSD License
%________________________________________________________

%% Loading useful files
if ~exist(filename,'dir')
    mkdir(filename)
end
disp(['Inverse kinematics (' filename ') ...'])
Human_model = BiomechanicalModel.OsteoArticularModel;
Markers_set = BiomechanicalModel.Markers;

%% Symbolic function generation
% Markers position with respects to joint coordinates
nbClosedLoop = sum(~cellfun('isempty',{Human_model.ClosedLoop}));

%% List of markers from the model
list_markers={};
for i=1:numel(Markers_set)
    if Markers_set(i).exist
        list_markers=[list_markers;Markers_set(i).name]; %#ok<AGROW>
    end
end
nb_solid=size(Human_model,2);  % number of solids

%% Getting real markers position from the c3d file
[real_markers, nb_frame, Firstframe, Lastframe,f_mocap] = Get_real_markers(filename,list_markers, AnalysisParameters); %#ok<ASGLU>

%% Root position
Base_position=cell(nb_frame,1);
Base_rotation=cell(nb_frame,1);
for i=1:nb_frame
    Base_position{i}=zeros(3,1);
    Base_rotation{i}=eye(3,3);
end

%% Initializations

% Linear constraints for the inverse kinematics
Aeq_ik=zeros(nb_solid);  % initialization
beq_ik=zeros(nb_solid,1);
for i=1:nb_solid
   if size(Human_model(i).linear_constraint) ~= [0 0] %#ok<BDSCA>
       Aeq_ik(i,i)=-1;
       Aeq_ik(i,Human_model(i).linear_constraint(1,1))=Human_model(i).linear_constraint(2,1);
   end    
end

%% Inverse kinematics frame per frame

options1 = optimoptions(@fmincon,'Display','off','TolFun',1e-3,'MaxFunEvals',20000,'GradObj','off','GradConstr','off');
options2 = optimoptions(@fmincon,'Algorithm','sqp','Display','off','TolFun',1e-2,'MaxFunEvals',20000,'GradObj','off','GradConstr','off');

q=zeros(nb_solid,nb_frame);

addpath('Symbolic_function')

nb_cut=max([Human_model.KinematicsCut]);

Rcut=zeros(3,3,nb_cut);   % initialization of the cut coordinates frames position and orientation
pcut=zeros(3,1,nb_cut);

% Generation of the functions list used in the cost function computation
list_function=cell(nb_cut,1);
for c=1:max([Human_model.KinematicsCut])
    list_function{c}=str2func(sprintf('f%dcut',c));
end
list_function_markers=cell(numel(list_markers),1);
for m=1:numel(list_markers)
    list_function_markers{m}=str2func(sprintf([list_markers{m} '_Position']));
end

% Joint limits
l_inf1=[Human_model.limit_inf]';
l_sup1=[Human_model.limit_sup]';

% Inverse kinematics
h = waitbar(0,['Inverse Kinematics (' filename ')']);
if nbClosedLoop == 0 % if there is no closed loo^p
    for f=1:nb_frame    
        if f == 1      % initial value
            q0=zeros(nb_solid,1);   
            ik_function_objective=@(qvar)CostFunctionSymbolicIK(qvar,nb_cut,real_markers,f,list_function,list_function_markers,Rcut,pcut);
            [q(:,f)] = fmincon(ik_function_objective,q0,[],[],Aeq_ik,beq_ik,l_inf1,l_sup1,[],options1);
        else
            if f > 2
                delta=q(:,f-1)-q(:,f-2);
                q0=q(:,f-1)+delta;
            else            
                q0=q(:,f-1);
            end
        l_inf=max(q(:,f-1)-0.2,[Human_model.limit_inf]');
        l_sup=min(q(:,f-1)+0.2,[Human_model.limit_sup]'); 
        ik_function_objective=@(qvar)CostFunctionSymbolicIK(qvar,nb_cut,real_markers,f,list_function,list_function_markers,Rcut,pcut);
        [q(:,f)] = fmincon(ik_function_objective,q0,[],[],Aeq_ik,beq_ik,l_inf,l_sup,[],options2); 
        end
        waitbar(f/nb_frame)
    end
else
    for f=1:nb_frame    
        if f == 1      % initial value
            q0=zeros(nb_solid,1);   
            ik_function_objective=@(qvar)CostFunctionSymbolicIK(qvar,nb_cut,real_markers,f,list_function,list_function_markers,Rcut,pcut);
            nonlcon=@(qvar)ClosedLoop(qvar,nbClosedLoop);
            [q{1}(:,f)] = fmincon(ik_function_objective,q0,[],[],Aeq_ik,beq_ik,l_inf1,l_sup1,nonlcon,options1);
        else
            if f > 2
                delta=q(:,f-1)-q(:,f-2);
                q0=q(:,f-1)+delta;
            else            
                q0=q(:,f-1);
            end
        l_inf=max(q(:,f-1)-0.2,[Human_model.limit_inf]');
        l_sup=min(q(:,f-1)+0.2,[Human_model.limit_sup]'); 
        ik_function_objective=@(qvar)CostFunctionSymbolicIK(qvar,nb_cut,real_markers,f,list_function,list_function_markers,Rcut,pcut);
        nonlcon=@(qvar)ClosedLoop(qvar,nbClosedLoop);
        [q(:,f)] = fmincon(ik_function_objective,q0,[],[],Aeq_ik,beq_ik,l_inf,l_sup,nonlcon,options2);
        end
        waitbar(f/nb_frame)
    end
end
close(h)

%% Data processing
if AnalysisParameters.IK.FilterActive
    % Data filtering
    q=filt_data(q',AnalysisParameters.IK.FilterCutOff,f_mocap)';
end

% Error computation
KinematicsError=zeros(numel(list_markers),nb_frame);
nb_cut=max([Human_model.KinematicsCut]);
for f=1:nb_frame
    [KinematicsError(:,f)] = ErrorMarkersIK(q(:,f),nb_cut,real_markers,f,list_markers,Rcut,pcut);
end

q6dof=[q(end-4:end,:);q(1,:)]; % joint coordinates of the 6-dof
q=q(1:end-6,:);  % joint coordinates
q(1,:)=0;        % position of the pelvis

time=real_markers(1).time';
    
%% Save data
ExperimentalData.FirstFrame = Firstframe;
ExperimentalData.LastFrame = Lastframe;
ExperimentalData.MarkerPositions = real_markers;
ExperimentalData.Time = time;

InverseKinematicResults.JointCoordinates = q;
InverseKinematicResults.FreeJointCoordinates = q6dof;
InverseKinematicResults.ReconstructionError = KinematicsError;
    
disp(['... Inverse kinematics (' filename ') done'])


%% We delete the folder to the path
rmpath('Symbolic_function')
end
