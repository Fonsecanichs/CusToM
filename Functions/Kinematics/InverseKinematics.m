function [] = InverseKinematics(AnalysisParameters,varargin)
% Computation of the inverse kinematics step
%   Computation of joint coordinates from motion capture data and a
%   biomechanical model
%
%	Based on:
% 	- Lu, T. W., & O’connor, J. J. (1999). 
%	Bone position estimation from skin marker co-ordinates using global optimisation with joint constraints. Journal of biomechanics, 32(2), 129-134.
%
%   INPUT
%   - AnalysisParameters: parameters of the musculoskeletal analysis,
%   automatically generated by the graphic interface 'Analysis';
%   - varargin: if the function 'InverseKinematics' is used in a
%   calibration step, the variable 'BiomechanicalModel' is defined as an
%   input.
%   OUTPUT
%   Results are automatically saved on the folder associated to each motion
%   capture in variables 'ExperimentalData' and 'InverseKinematicsResults'.
%________________________________________________________
%
% Licence
% Toolbox distributed under 3-Clause BSD License
%________________________________________________________
%
% Authors : Antoine Muller, Charles Pontonnier, Pierre Puchaud and
% Georges Dumont
%________________________________________________________
if numel(varargin)
    BiomechanicalModel = varargin{1};
else
    load('BiomechanicalModel.mat'); %#ok<LOAD>
end

% Inverse kinematics
for i = 1:numel(AnalysisParameters.filename)
    filename = AnalysisParameters.filename{i}(1:end-4);
    if AnalysisParameters.IK.Method == 1
        [ExperimentalData, InverseKinematicsResults] = InverseKinematicsOpti(filename,AnalysisParameters,BiomechanicalModel); %#ok<ASGLU> % Optimization method
    elseif AnalysisParameters.IK.Method == 2
        [ExperimentalData, InverseKinematicsResults] = InverseKinematicsLM(filename,AnalysisParameters,BiomechanicalModel); %#ok<ASGLU> % Levenberg-Marquardt algorithm
    end

    % Save data
    save([filename '/ExperimentalData'],'ExperimentalData');
    save([filename '/InverseKinematicsResults'],'InverseKinematicsResults');
end

end